{"ast":null,"code":"var _this = this;\n\nimport mongoose from 'mongoose';\nvar Schema = mongoose.Schema;\nvar ContactSchema = new Schema({\n  name: {\n    type: String,\n    required: [true, 'Name is a required property']\n  },\n  address: String,\n  age: {\n    type: Number,\n    min: 0,\n    max: 120,\n    required: true\n  },\n  email: String,\n  updated: {\n    type: Date,\n    default: Date.now\n  }\n});\nContactSchema.path('email').validate(function (email) {\n  var emailRegex = /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n  return emailRegex.test(email);\n}, 'A valid e-mail address is required');\n\nContactSchema.statics.findByEmail = function (email) {\n  return _this.findOne({\n    email: email\n  });\n};\n\nContactSchema.methods.compareEmail = function (candidateEmail) {\n  var isMatch = this.email === candidateEmail;\n\n  if (!isMatch) {\n    throw new Error('Password mismatch');\n  }\n\n  return this;\n};\n\nexport default mongoose.model('Contact', ContactSchema);","map":{"version":3,"sources":["/Users/brianwfrazier/Downloads/dartStats/src/api/contacts/contactModel.js"],"names":["mongoose","Schema","ContactSchema","name","type","String","required","address","age","Number","min","max","email","updated","Date","default","now","path","validate","emailRegex","test","statics","findByEmail","findOne","methods","compareEmail","candidateEmail","isMatch","Error","model"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,IAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AAEA,IAAMC,aAAa,GAAG,IAAID,MAAJ,CAAW;AAC/BE,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,6BAAP;AAFN,GADyB;AAK/BC,EAAAA,OAAO,EAAEF,MALsB;AAM/BG,EAAAA,GAAG,EAAE;AACHJ,IAAAA,IAAI,EAAEK,MADH;AAEHC,IAAAA,GAAG,EAAE,CAFF;AAGHC,IAAAA,GAAG,EAAE,GAHF;AAIHL,IAAAA,QAAQ,EAAE;AAJP,GAN0B;AAY/BM,EAAAA,KAAK,EAAEP,MAZwB;AAa/BQ,EAAAA,OAAO,EAAE;AACPT,IAAAA,IAAI,EAAEU,IADC;AAEPC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAFP;AAbsB,CAAX,CAAtB;AAmBAd,aAAa,CAACe,IAAd,CAAmB,OAAnB,EAA4BC,QAA5B,CAAqC,UAACN,KAAD,EAAW;AAC9C,MAAIO,UAAU,GAAG,qCAAjB;AACA,SAAOA,UAAU,CAACC,IAAX,CAAgBR,KAAhB,CAAP;AACD,CAHD,EAGG,oCAHH;;AAKAV,aAAa,CAACmB,OAAd,CAAsBC,WAAtB,GAAoC,UAACV,KAAD,EAAW;AAC7C,SAAO,KAAI,CAACW,OAAL,CAAa;AAClBX,IAAAA,KAAK,EAAEA;AADW,GAAb,CAAP;AAGD,CAJD;;AAMAV,aAAa,CAACsB,OAAd,CAAsBC,YAAtB,GAAqC,UAAUC,cAAV,EAA0B;AAC7D,MAAMC,OAAO,GAAG,KAAKf,KAAL,KAAec,cAA/B;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,SAAO,IAAP;AACD,CAND;;AASA,eAAe5B,QAAQ,CAAC6B,KAAT,CAAe,SAAf,EAA0B3B,aAA1B,CAAf","sourcesContent":["import mongoose from 'mongoose';\nconst Schema = mongoose.Schema;\n\nconst ContactSchema = new Schema({\n  name: {\n    type: String,\n    required: [true, 'Name is a required property']\n  },\n  address: String,\n  age: {\n    type: Number,\n    min: 0,\n    max: 120,\n    required: true\n  },\n  email: String,\n  updated: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\nContactSchema.path('email').validate((email) => {\n  var emailRegex = /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n  return emailRegex.test(email);\n}, 'A valid e-mail address is required');\n\nContactSchema.statics.findByEmail = (email) => {\n  return this.findOne({\n    email: email\n  });\n};\n\nContactSchema.methods.compareEmail = function (candidateEmail) {\n  const isMatch = this.email === candidateEmail;\n  if (!isMatch) {\n    throw new Error('Password mismatch');\n  }\n  return this;\n};\n\n\nexport default mongoose.model('Contact', ContactSchema);"]},"metadata":{},"sourceType":"module"}